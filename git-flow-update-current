#!/bin/bash
#
# Update release branches, ensure proper merges, and close issues
#
# This script handles:
# 1. Updating release/current to the latest release tag
# 2. Creating/updating release/x.y.z branch to match the tag
# 3. Ensuring all changes are merged properly between branches
# 4. Pushing all branches and tags to remote
# 5. Closing related GitHub issues
#
# It assumes that the most recent tag is the latest release
#

# Get the latest version tag
LATEST_TAG=$(git tag --sort=-v:refname | head -n 1)
RELEASE_NAME=${LATEST_TAG#v}  # Remove 'v' prefix if present

echo "Handling release process for $LATEST_TAG..."

# Get the original branch
ORIGINAL_BRANCH=$(git branch --show-current)

# Step 1: Update release/current branch
echo "Updating release/current to point to $LATEST_TAG..."
git checkout release/current 2>/dev/null || git checkout -b release/current "$LATEST_TAG"
git reset --hard "$LATEST_TAG"
git push --force origin release/current

# Step 2: Create or update release/x.y.z branch
echo "Creating/updating release/$RELEASE_NAME branch..."
RELEASE_BRANCH="release/$RELEASE_NAME"
if git show-ref --verify --quiet refs/heads/$RELEASE_BRANCH; then
    git checkout $RELEASE_BRANCH
    git reset --hard "$LATEST_TAG"
else
    git checkout -b $RELEASE_BRANCH "$LATEST_TAG"
fi
git push --force origin $RELEASE_BRANCH

# Step 3: Ensure main branch is up to date
echo "Ensuring main branch is up to date with release..."
git checkout main
# Check if main already contains the tag commit
if ! git merge-base --is-ancestor "$LATEST_TAG" HEAD; then
    git merge --no-ff "$LATEST_TAG" -m "Merge release $LATEST_TAG into main"
    git push origin main
else
    echo "Main branch already contains release $LATEST_TAG"
fi

# Check for issues to close
echo "Checking for issues to close in this release..."
RELEASE_NAME=${LATEST_TAG#v}  # Remove 'v' prefix if present

# Look for issues mentioned in commit messages since the previous release
PREVIOUS_TAG=$(git tag --sort=-v:refname | head -n 2 | tail -n 1)
if [ -n "$PREVIOUS_TAG" ]; then
    echo "Finding issues fixed between $PREVIOUS_TAG and $LATEST_TAG"
    ISSUES=$(git log --format="%B" $PREVIOUS_TAG..$LATEST_TAG | grep -o -E '(close|closes|closed|fix|fixes|fixed|resolve|resolves|resolved)\s+#[0-9]+' | grep -o -E '#[0-9]+' | sort -u | tr '\n' ' ')
    
    if [ -n "$ISSUES" ]; then
        echo "Issues to close: $ISSUES"
        echo ""
        echo "To close these issues on GitHub, you can run:"
        echo "gh issue close [ISSUE_NUMBER] -c \"\$(cat <<EOF"
        echo "Closed by release $LATEST_TAG"
        echo ""
        echo "This issue has been automatically closed as part of the $LATEST_TAG release process."
        echo "The changes that address this issue are now available in the latest release."
        echo "EOF"
        echo ")\""
        echo ""
        
        # If gh CLI is installed, offer to close issues automatically
        if command -v gh &> /dev/null; then
            read -p "Would you like to close these issues now? (y/n) " -n 1 -r
            echo
            if [[ $REPLY =~ ^[Yy]$ ]]; then
                for ISSUE in $ISSUES; do
                    ISSUE_NUM=${ISSUE#\#}  # Remove # prefix
                    # Use process substitution to properly handle multiline text
                    gh issue close "$ISSUE_NUM" -c "$(cat <<EOF
Closed by release $LATEST_TAG

This issue has been automatically closed as part of the $LATEST_TAG release process.
The changes that address this issue are now available in the latest release.
EOF
)"
                    echo "Closed issue $ISSUE"
                done
            fi
        fi
    else
        echo "No issues found to close."
    fi
fi

# Step 4: Merge changes back to develop branch
echo "Ensuring develop branch is up to date with release changes..."
git checkout develop
# Check if develop already contains the tag commit
if ! git merge-base --is-ancestor "$LATEST_TAG" HEAD; then
    git merge --no-ff "$LATEST_TAG" -m "Merge release $LATEST_TAG back to develop"
    git push origin develop
else
    echo "Develop branch already contains release $LATEST_TAG"
fi

# Step 5: Push any tags that haven't been pushed yet
echo "Pushing tags to remote..."
git push --tags

# Return to the original branch
git checkout "$ORIGINAL_BRANCH" 2>/dev/null || git checkout develop

echo "✅ Release process completed for $LATEST_TAG"
echo "✅ All branches (main, develop, release/current) are up to date"
echo "✅ Tags have been pushed to remote"
echo "⚠️  IMPORTANT: Delete the versioned release branch after finalizing:"
echo "    git branch -d release/$RELEASE_NAME"
echo "    git push origin --delete release/$RELEASE_NAME"