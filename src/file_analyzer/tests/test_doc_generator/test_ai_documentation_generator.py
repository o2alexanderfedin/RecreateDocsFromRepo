"""
Tests for AI documentation generator module.
"""
import os
import tempfile
import unittest
from unittest.mock import MagicMock, patch

from file_analyzer.ai_providers.mock_provider import MockAIProvider
from file_analyzer.ai_providers.provider_interface import AIModelProvider
from file_analyzer.doc_generator.ai_documentation_generator import (
    AiDocumentationGenerator,
    generate_file_documentation
)

class MockAIDocProvider(AIModelProvider):
    """Mock AI provider specifically for documentation generation."""
    
    def analyze_content(self, file_path: str, content: str) -> dict:
        """Return mock analysis for file type."""
        return {
            "file_type": "code",
            "language": "python",
            "purpose": "implementation",
            "characteristics": ["functions", "classes"],
            "confidence": 0.9
        }
    
    def generate_documentation(self, file_path: str, content: str, metadata: dict) -> dict:
        """Mock documentation generation for testing."""
        return {
            "description": "This is a sample file description generated by AI.",
            "purpose": "This file implements core functionality for the application.",
            "usage_examples": [
                "```python\nimport sample_module\n\nresult = sample_module.process_data(data)\n```"
            ],
            "architecture_notes": "This module follows the repository's architecture pattern.",
            "key_components": [
                {
                    "name": "SampleClass",
                    "description": "A class that handles data processing operations."
                },
                {
                    "name": "process_data",
                    "description": "Function that processes input data and returns results."
                }
            ],
            "main_concepts": [
                "Data processing",
                "Error handling",
                "Configuration management"
            ]
        }


class TestAIDocumentationGenerator(unittest.TestCase):
    """Tests for the AI Documentation Generator."""

    def setUp(self):
        """Set up test environment."""
        self.mock_provider = MockAIDocProvider()
        self.ai_doc_generator = AiDocumentationGenerator(self.mock_provider)
        
        # Sample file content
        self.file_content = """
        def sample_function():
            \"\"\"This is a sample function.\"\"\"
            return "Hello World"
            
        class SampleClass:
            \"\"\"This is a sample class.\"\"\"
            def __init__(self):
                self.value = 42
                
            def get_value(self):
                \"\"\"Get the value.\"\"\"
                return self.value
        """
        
        # Sample metadata
        self.metadata = {
            "file_type": "code",
            "language": "python",
            "code_structure": {
                "structure": {
                    "imports": [],
                    "classes": [
                        {
                            "name": "SampleClass",
                            "methods": ["__init__", "get_value"],
                            "properties": ["value"],
                            "documentation": "This is a sample class."
                        }
                    ],
                    "functions": [
                        {
                            "name": "sample_function",
                            "parameters": [],
                            "documentation": "This is a sample function."
                        }
                    ]
                }
            },
            "frameworks": [
                {"name": "sample_framework", "confidence": 0.8}
            ]
        }
    
    def test_init(self):
        """Test initialization of AI Documentation Generator."""
        self.assertIsInstance(self.ai_doc_generator, AiDocumentationGenerator)
        self.assertEqual(self.ai_doc_generator.ai_provider, self.mock_provider)
    
    def test_generate_file_documentation(self):
        """Test generation of file documentation."""
        result = self.ai_doc_generator.generate_file_documentation(
            "sample.py", self.file_content, self.metadata
        )
        
        # Verify structure of result
        self.assertIn("description", result)
        self.assertIn("purpose", result)
        self.assertIn("usage_examples", result)
        self.assertIn("key_components", result)
        self.assertIn("main_concepts", result)
        
        # Check content types
        self.assertIsInstance(result["description"], str)
        self.assertIsInstance(result["purpose"], str)
        self.assertIsInstance(result["usage_examples"], list)
        self.assertIsInstance(result["key_components"], list)
        self.assertIsInstance(result["main_concepts"], list)
    
    def test_generate_file_documentation_empty_metadata(self):
        """Test with empty metadata."""
        result = self.ai_doc_generator.generate_file_documentation(
            "sample.py", self.file_content, {}
        )
        
        # Should still produce valid output with empty metadata
        self.assertIn("description", result)
        self.assertIn("purpose", result)
    
    def test_integration_with_markdown_generator(self):
        """Test integration with the Markdown generation process."""
        # This is a simple test to verify the function exists and is callable
        # A real integration test would be added after integrating with markdown_generator
        self.assertTrue(callable(generate_file_documentation))
        
        # Verify the function has the expected signature
        import inspect
        sig = inspect.signature(generate_file_documentation)
        self.assertIn('file_path', sig.parameters)
        self.assertIn('content', sig.parameters)
        self.assertIn('metadata', sig.parameters)
        self.assertIn('ai_provider', sig.parameters)


class TestGenerateFileDocumentation(unittest.TestCase):
    """Tests for the generate_file_documentation convenience function."""
    
    def test_generate_file_documentation_function(self):
        """Test the generate_file_documentation convenience function."""
        mock_provider = MockAIDocProvider()
        
        result = generate_file_documentation(
            "sample.py",
            "sample content",
            {"file_type": "code", "language": "python"},
            ai_provider=mock_provider
        )
        
        # Basic validation
        self.assertIn("description", result)
        self.assertIn("purpose", result)
        self.assertIn("usage_examples", result)
    
    def test_generate_file_documentation_with_default_provider(self):
        """Test generate_file_documentation with default mock provider."""
        # This should use the MockAIProvider internally
        result = generate_file_documentation(
            "sample.py",
            "sample content",
            {"file_type": "code", "language": "python"}
        )
        
        # Basic validation - should still work with default provider
        self.assertIn("description", result)


if __name__ == "__main__":
    unittest.main()